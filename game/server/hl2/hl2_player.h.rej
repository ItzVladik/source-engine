--- game/server/hl2/hl2_player.h	2024-08-11 15:07:31.362952194 +0500
+++ game/server/hl2/hl2_player.h	2023-11-14 14:20:57.040786000 +0500
@@ -15,6 +15,8 @@
 #include "simtimer.h"
 #include "soundenvelope.h"
 
+#include "coolmod/sp_animstate.h"
+
 class CAI_Squad;
 class CPropCombineBall;
 
@@ -42,6 +44,27 @@
 // Time between checks to determine whether NPCs are illuminated by the flashlight
 #define FLASHLIGHT_NPC_CHECK_INTERVAL	0.4
 
+class CHL2Ragdoll : public CBaseAnimatingOverlay
+{
+public:
+	DECLARE_CLASS(CHL2Ragdoll, CBaseAnimatingOverlay);
+	DECLARE_SERVERCLASS();
+
+	// Transmit ragdolls to everyone.
+	virtual int UpdateTransmitState()
+	{
+		return SetTransmitState(FL_EDICT_ALWAYS);
+	}
+
+public:
+	// In case the client has the player entity, we transmit the player index.
+	// In case the client doesn't have it, we transmit the player's model index, origin, and angles
+	// so they can create a ragdoll in the right place.
+	CNetworkHandle(CBaseEntity, m_hPlayer);	// Networked entity handle 
+	CNetworkVector(m_vecRagdollVelocity);
+	CNetworkVector(m_vecRagdollOrigin);
+};
+
 //----------------------------------------------------
 // Definitions for weapon slots
 //----------------------------------------------------
@@ -116,12 +139,22 @@
 
 	virtual bool		ClientCommand( const CCommand &args );
 
+    // New Leaning stuff
+	void CheckLean();
+	void StartLeaning();
+	void StopLeaning();
+	bool IsLeaning() { return m_bIsLeaning; }
+
 	// from cbasecombatcharacter
 	void				InitVCollision( const Vector &vecAbsOrigin, const Vector &vecAbsVelocity );
 	WeaponProficiency_t CalcWeaponProficiency( CBaseCombatWeapon *pWeapon );
 
 	Class_T				Classify ( void );
 
+	// Tracks our ragdoll entity.
+    CNetworkHandle( CBaseEntity, m_hRagdoll );	// Networked entity handle 
+	CNetworkVar( bool, m_bNightVisionOn );		// Is the NightVision turned on ?
+
 	// from CBasePlayer
 	virtual void		SetupVisibility( CBaseEntity *pViewEntity, unsigned char *pvs, int pvssize );
 
@@ -198,6 +231,7 @@
 	const impactdamagetable_t &GetPhysicsImpactDamageTable();
 	virtual int			OnTakeDamage( const CTakeDamageInfo &info );
 	virtual int			OnTakeDamage_Alive( const CTakeDamageInfo &info );
+	virtual void		CreateRagdollEntity();
 	virtual void		OnDamagedByExplosion( const CTakeDamageInfo &info );
 	bool				ShouldShootMissTarget( CBaseCombatCharacter *pAttacker );
 
@@ -232,6 +266,36 @@
 	bool				IsIlluminatedByFlashlight( CBaseEntity *pEntity, float *flReturnDot );
 	void				SetFlashlightPowerDrainScale( float flScale ) { m_flFlashlightPowerDrainScale = flScale; }
 
+	//SMOD KICKING BITCH! >:3
+	void				KickAttack(void);
+	void				SetKickTime(void);
+	void				Hit(trace_t &traceHit, Activity nHitActivity, bool bIsSecondary = false);
+	CNetworkVar(float, m_flNextKickAttack);
+	CNetworkVar(float, KickTime);
+	CNetworkVar(bool, m_bIsKicking);
+
+	// CSSPORT
+	void KickBack(
+		float up_base,
+		float lateral_base,
+		float up_modifier,
+		float lateral_modifier,
+		float up_max,
+		float lateral_max,
+		int direction_change);
+	CNetworkVar(int, m_iDirection);	// The current lateral kicking direction; 1 = right,  0 = left
+	CNetworkVar(int, m_iShotsFired);	// number of shots fired recently
+	CNetworkVar(float, m_flNextShotsClear);
+
+	CNetworkVar(float, m_flBlastEffectTime);
+	void				SetBlastEffectTime(void);
+	CNetworkVar(float, m_flBlurTime);
+	void				SetBlurTime(void);
+	CNetworkVar(float, m_flIronsightBlurTime);
+	void				SetIronsightBlurTime(float amount);
+	CNetworkVar(float, m_flFPBlur);
+	void				SetFirstPersonBlurVar(float amount);
+
 	// Underwater breather device
 	virtual void		SetPlayerUnderwater( bool state );
 	virtual bool		CanBreatheUnderwater() const { return m_HL2Local.m_flSuitPower > 0.0f; }
@@ -259,6 +323,8 @@
 	virtual void RemoveSuit( void );
 	void  HandleAdmireGlovesAnimation( void );
 	void  StartAdmireGlovesAnimation( void );
+
+	virtual void SetAnimation(PLAYER_ANIM playerAnim);
 	
 	void  HandleSpeedChanges( void );
 
@@ -294,6 +360,17 @@
 	virtual void		ItemPostFrame();
 	virtual void		PlayUseDenySound();
 
+	void				SwitchSlowMo();
+	bool				ShouldHealthRegen();
+
+	// New Leaning stuff
+	bool				m_bIsLeaning;
+
+public:
+	// This player's HL2 specific data that should only be replicated to 
+	//  the player and not to other players.
+	CNetworkVarEmbedded( CHL2PlayerLocalData, m_HL2Local );
+
 private:
 	bool				CommanderExecuteOne( CAI_BaseNPC *pNpc, const commandgoal_t &goal, CAI_BaseNPC **Allies, int numAllies );
 
@@ -302,7 +379,7 @@
 	Class_T				m_nControlClass;			// Class when player is controlling another entity
 	// This player's HL2 specific data that should only be replicated to 
 	//  the player and not to other players.
-	CNetworkVarEmbedded( CHL2PlayerLocalData, m_HL2Local );
+	// CNetworkVarEmbedded( CHL2PlayerLocalData, m_HL2Local );
 
 	float				m_flTimeAllSuitDevicesOff;
 
@@ -360,8 +437,14 @@
 	EHANDLE				m_hLocatorTargetEntity; // The entity that's being tracked by the suit locator.
 
 	float				m_flTimeNextLadderHint;	// Next time we're eligible to display a HUD hint about a ladder.
-	
+
+	float				m_flNextHealthRegen;
+	float				m_flNextGivenHealth;
+
 	friend class CHL2GameMovement;
+
+	CSinglePlayerAnimState *m_pPlayerAnimState;
+	QAngle m_angEyeAngles;
 };
 
 
@@ -380,5 +463,14 @@
 	m_bUseCappedPhysicsDamageTable = false;
 }
 
+//SMOD: We needed a pointer directly to HL2's player (like the hl2mp player and the base player have)
+inline CHL2_Player *ToHL2Player(CBaseEntity *pEntity)
+{
+	if (!pEntity || !pEntity->IsPlayer())
+		return NULL;
+
+	return dynamic_cast<CHL2_Player*>(pEntity);
+}
+
 
 #endif	//HL2_PLAYER_H
