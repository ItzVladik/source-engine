--- game/server/player.cpp	2024-08-11 15:07:31.466953778 +0500
+++ game/server/player.cpp	2024-03-31 15:15:03.409500500 +0500
@@ -82,6 +82,10 @@
 #include "weapon_physcannon.h"
 #endif
 
+#include "COOLMOD/smod_cvars.h"
+#include "effect_dispatch_data.h"
+#include "te_effect_dispatch.h"
+
 ConVar autoaim_max_dist( "autoaim_max_dist", "2160" ); // 2160 = 180 feet
 ConVar autoaim_max_deflect( "autoaim_max_deflect", "0.99" );
 
@@ -183,6 +187,8 @@
 ConVar	sk_player_arm( "sk_player_arm","1" );
 ConVar	sk_player_leg( "sk_player_leg","1" );
 
+ConVar smod_player_wearhelmet("smod_player_wearhelmet", "0");
+
 //ConVar	player_usercommand_timeout( "player_usercommand_timeout", "10", 0, "After this many seconds without a usercommand from a player, the client is kicked." );
 #ifdef _DEBUG
 ConVar  sv_player_net_suppress_usercommands( "sv_player_net_suppress_usercommands", "0", FCVAR_CHEAT, "For testing usercommand hacking sideeffects. DO NOT SHIP" );
@@ -945,6 +951,23 @@
 			break;
 		}
 
+		if (ptr->hitgroup == HITGROUP_HEAD)
+		{
+			EmitSound("Player.HeadShot");
+			if (smod_player_wearhelmet.GetBool())
+			{
+				EmitSound("Player.Helmet");
+				CEffectData data;
+
+				data.m_vOrigin = ptr->endpos;
+				data.m_vAngles = GetAbsAngles();
+
+				data.m_vNormal = ptr->plane.normal;
+
+				DispatchEffect("ManhackSparks", data);
+			}
+		}
+
 #ifdef HL2_EPISODIC
 		// If this damage type makes us bleed, then do so
 		bool bShouldBleed = !g_pGameRules->Damage_ShouldNotBleed( info.GetDamageType() );
@@ -1746,6 +1769,8 @@
 	angles.z = 0;
 	
 	SetLocalAngles( angles );
+	CreateRagdollEntity();
+	BecomeRagdollOnClient(vec3_origin);
 
 	SetThink(&CBasePlayer::PlayerDeathThink);
 	SetNextThink( gpGlobals->curtime + 0.1f );
@@ -4511,6 +4524,16 @@
 {
 	m_vecSmoothedVelocity = m_vecSmoothedVelocity * SMOOTHING_FACTOR + GetAbsVelocity() * ( 1 - SMOOTHING_FACTOR );
 
+	// Not pitch for player
+	QAngle saveAngles = GetLocalAngles();
+
+	QAngle useAngles = saveAngles;
+	useAngles[PITCH] = 0.0f;
+
+	SetLocalAngles(useAngles);
+
+	SetLocalAngles(saveAngles);
+
 	if ( !g_fGameOver && !m_iPlayerLocked )
 	{
 		if ( IsAlive() )
@@ -4994,9 +5017,10 @@
 	CSingleUserRecipientFilter user( this );
 	enginesound->SetPlayerDSP( user, 0, false );
 
-	CreateViewModel();
+	CreateViewModel();
+	CreateViewModel(VM_LEGS);
 
-	SetCollisionGroup( COLLISION_GROUP_PLAYER );
+	SetCollisionGroup( COLLISION_GROUP_WEAPON );
 
 	// if the player is locked, make sure he stays locked
 	if ( m_iPlayerLocked )
@@ -5078,6 +5102,10 @@
 	PrecacheScriptSound( "Player.DrownContinue" );
 	PrecacheScriptSound( "Player.Wade" );
 	PrecacheScriptSound( "Player.AmbientUnderWater" );
+
+	PrecacheScriptSound("Player.HeadShot");
+	PrecacheScriptSound("Player.Helmet");
+
 	enginesound->PrecacheSentenceGroup( "HEV" );
 
 	// These are always needed
@@ -5992,7 +6020,7 @@
 	// Cheat to create a jeep in front of the player
 	Vector vecForward;
 	AngleVectors( pPlayer->EyeAngles(), &vecForward );
-	CBaseEntity *pJeep = (CBaseEntity *)CreateEntityByName( "prop_vehicle_jeep" );
+	CBaseEntity *pJeep = (CBaseEntity *)CreateEntityByName( "prop_vehicle_jalopy" );
 	if ( pJeep )
 	{
 		Vector vecOrigin = pPlayer->GetAbsOrigin() + vecForward * 256 + Vector(0,0,64);
@@ -6163,6 +6191,7 @@
 #ifdef HL2_EPISODIC
 		GiveAmmo( 5,	"Hopwire" );
 #endif		
+		GiveNamedItem( "item_battery" );
 		GiveNamedItem( "weapon_smg1" );
 		GiveNamedItem( "weapon_frag" );
 		GiveNamedItem( "weapon_crowbar" );
@@ -6174,6 +6203,19 @@
 		GiveNamedItem( "weapon_rpg" );
 		GiveNamedItem( "weapon_357" );
 		GiveNamedItem( "weapon_crossbow" );
+		GiveNamedItem( "weapon_ak47" );
+		GiveNamedItem( "weapon_grease" );
+		GiveNamedItem( "weapon_mp5" );
+		GiveNamedItem( "weapon_kar98" );
+		GiveNamedItem( "weapon_physgun" );
+		GiveNamedItem( "weapon_alyxgun" );
+		GiveNamedItem( "weapon_flaregun" );
+		GiveNamedItem( "weapon_gauss" );
+		GiveNamedItem( "weapon_stickybomb" );
+		GiveNamedItem( "weapon_hopwire" );
+		GiveNamedItem( "weapon_hopwire_old" );
+		GiveNamedItem( "weapon_bugspawner" );
+		GiveNamedItem( "weapon_anm14" );
 #ifdef HL2_EPISODIC
 		// GiveNamedItem( "weapon_magnade" );
 #endif
@@ -6556,6 +6598,21 @@
 		}
 		return true;
 	}
+	else if (!Q_stricmp(args[0], "freeaimvars"))
+	{
+		freeaimX = Q_atof(args[1]);
+		freeaimY = Q_atof(args[2]);
+
+		return true;
+	}
+	else if (stricmp(cmd, "toggle_ironsight") == 0)
+	{
+		CBaseCombatWeapon *pWeapon = GetActiveWeapon();
+		if (pWeapon != NULL)
+			pWeapon->ToggleIronsights();
+
+		return true;
+	}
 
 	return false;
 }
@@ -6944,7 +7001,14 @@
 	if ( ( ShouldAutoaim() == false ) || ( params.m_fScale == AUTOAIM_SCALE_DIRECT_ONLY ) )
 	{
 		Vector	forward;
-		AngleVectors( EyeAngles() + m_Local.m_vecPunchAngle, &forward );
+		QAngle angles = EyeAngles();
+		if (cl_freeaim.GetInt())
+		{
+			angles.x += freeaimY;
+			angles.y -= freeaimX;
+		}
+
+		AngleVectors(angles + m_Local.m_vecPunchAngle, &forward );
 
 		params.m_vecAutoAimDir = forward;
 		params.m_hAutoAimEntity.Set(NULL);
@@ -6959,6 +7023,12 @@
 
 	QAngle angles = AutoaimDeflection( vecSrc, params );
 
+	if (cl_freeaim.GetInt())
+	{
+		angles.x += freeaimY;
+		angles.y -= freeaimX;
+	}
+
 	// update ontarget if changed
 	if ( !g_pGameRules->AllowAutoTargetCrosshair() )
 		m_fOnTarget = false;
@@ -9373,4 +9443,4 @@
 		return steamIDForPlayer.ConvertToUint64();
 	return 0;
 }
-#endif // NO_STEAM
+#endif // NO_STEAM
