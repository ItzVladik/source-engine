--- game/server/physics_prop_ragdoll.cpp	2024-08-11 15:07:31.462953717 +0500
+++ game/server/physics_prop_ragdoll.cpp	2024-05-12 15:20:34.332578200 +0500
@@ -20,10 +20,17 @@
 #include "AI_Criteria.h"
 #include "ragdoll_shared.h"
 #include "hierarchy.h"
+#include "gib.h"
+#include "coolmod/smod_cvars.h"
+#include "decals.h"
+#include "te_effect_dispatch.h"
 
 // memdbgon must be the last include file in a .cpp file!!!
 #include "tier0/memdbgon.h"
 
+#define HUMAN_GIBS 1
+#define ALIEN_GIBS 2
+
 //-----------------------------------------------------------------------------
 // Forward declarations
 //-----------------------------------------------------------------------------
@@ -39,6 +46,10 @@
 
 const float ATTACHED_DAMPING_SCALE = 50.0f;
 
+extern ConVar ragdoll_twitch;
+extern ConVar gore_togib;
+extern ConVar gore_gibhealth;
+
 //-----------------------------------------------------------------------------
 // Spawnflags
 //-----------------------------------------------------------------------------
@@ -275,6 +286,8 @@
 	m_allAsleep = false;
 	m_flFadeScale = 1;
 	m_flDefaultFadeScale = 1;
+	m_bloodColor = BLOOD_COLOR_RED;
+	m_flGibHealth = gore_gibhealth.GetFloat();
 }
 
 CRagdollProp::~CRagdollProp( void )
@@ -815,11 +828,250 @@
 
 void CRagdollProp::TraceAttack( const CTakeDamageInfo &info, const Vector &dir, trace_t *ptr, CDmgAccumulator *pAccumulator )
 {
-	if ( ptr->physicsbone >= 0 && ptr->physicsbone < m_ragdoll.listCount )
+	UTIL_BloodImpact(info.GetDamagePosition(), ptr->plane.normal, m_bloodColor, 40);
+	UTIL_BloodSpray(info.GetDamagePosition(), ptr->plane.normal, m_bloodColor, 5, FX_BLOODSPRAY_ALL);
+
+	// make blood decal on the wall!
+	trace_t Bloodtr;
+	Vector vecTraceDir;
+	float flNoise;
+	int cCount;
+	int i;
+
+	if (info.GetDamage() < 10)
+	{
+		flNoise = 0.1;
+		cCount = 1;
+	}
+	else if (info.GetDamage() < 25)
+	{
+		flNoise = 0.2;
+		cCount = 2;
+	}
+	else
+	{
+		flNoise = 0.3;
+		cCount = 4;
+	}
+
+	if (gore_togib.GetBool())
 	{
-		VPhysicsSwapObject( m_ragdoll.list[ptr->physicsbone].pObject );
+		m_flGibHealth -= info.GetDamage();
+
+		if (m_bloodColor == BLOOD_COLOR_RED)
+		{
+			float flTraceDist = (GetDamageType() & DMG_AIRBOAT) ? 384 : 172;
+			for (i = 0; i < cCount; i++)
+			{
+				vecTraceDir = dir * -1;// trace in the opposite direction the shot came from (the direction the shot is going)
+
+				vecTraceDir.x += random->RandomFloat(-flNoise, flNoise);
+				vecTraceDir.y += random->RandomFloat(-flNoise, flNoise);
+				vecTraceDir.z += random->RandomFloat(-flNoise, flNoise);
+
+				AI_TraceLine(ptr->endpos, ptr->endpos + vecTraceDir * -flTraceDist, MASK_ALL, this, COLLISION_GROUP_INTERACTIVE, &Bloodtr);
+				if (Bloodtr.fraction != 1.0)
+				{
+					UTIL_BloodDecalTrace(&Bloodtr, BLOOD_COLOR_RED);
+				}
+			}
+
+			if (m_flGibHealth <= 0)
+			{
+				CEffectData	data;
+
+				data.m_vOrigin = WorldSpaceCenter();
+				data.m_vNormal = data.m_vOrigin - info.GetDamagePosition();
+				VectorNormalize(data.m_vNormal);
+
+				data.m_flScale = RemapVal(m_iHealth, 0, -500, 1, 3);
+				data.m_flScale = clamp(data.m_flScale, 1, 3);
+				data.m_nMaterial = HUMAN_GIBS;
+				data.m_nColor = BLOOD_COLOR_RED;
+
+				DispatchEffect("HL1Gib", data);
+
+				UTIL_BloodSpray(WorldSpaceCenter(), info.GetDamageForce(), BLOOD_COLOR_RED, 30, FX_BLOODSPRAY_ALL);
+				UTIL_BloodImpact(WorldSpaceCenter(), info.GetDamageForce(), BLOOD_COLOR_RED, 100);
+
+				EmitSound("Player.Splat");
+
+				RemoveDeferred();
+			}
+		}
+
+		if (m_bloodColor == BLOOD_COLOR_GREEN)
+		{
+			float flTraceDist = (GetDamageType() & DMG_AIRBOAT) ? 384 : 172;
+			for (i = 0; i < cCount; i++)
+			{
+				vecTraceDir = dir * -1;// trace in the opposite direction the shot came from (the direction the shot is going)
+
+				vecTraceDir.x += random->RandomFloat(-flNoise, flNoise);
+				vecTraceDir.y += random->RandomFloat(-flNoise, flNoise);
+				vecTraceDir.z += random->RandomFloat(-flNoise, flNoise);
+
+				AI_TraceLine(ptr->endpos, ptr->endpos + vecTraceDir * -flTraceDist, MASK_ALL, this, COLLISION_GROUP_INTERACTIVE, &Bloodtr);
+				if (Bloodtr.fraction != 1.0)
+				{
+					UTIL_BloodDecalTrace(&Bloodtr, BLOOD_COLOR_GREEN);
+				}
+			}
+
+			if (m_flGibHealth <= 0)
+			{
+				CEffectData	data;
+
+				data.m_vOrigin = WorldSpaceCenter();
+				data.m_vNormal = data.m_vOrigin - info.GetDamagePosition();
+				VectorNormalize(data.m_vNormal);
+
+				data.m_flScale = RemapVal(m_iHealth, 0, -500, 1, 3);
+				data.m_flScale = clamp(data.m_flScale, 1, 3);
+				data.m_nMaterial = ALIEN_GIBS;
+				data.m_nColor = BLOOD_COLOR_GREEN;
+
+				DispatchEffect("HL1Gib", data);
+
+				UTIL_BloodSpray(WorldSpaceCenter(), info.GetDamageForce(), BLOOD_COLOR_GREEN, 30, FX_BLOODSPRAY_ALL);
+				UTIL_BloodImpact(WorldSpaceCenter(), info.GetDamageForce(), BLOOD_COLOR_GREEN, 100);
+
+				EmitSound("Player.Splat");
+
+				RemoveDeferred();
+			}
+		}
+
+		if (m_bloodColor == BLOOD_COLOR_YELLOW)
+		{
+			float flTraceDist = (GetDamageType() & DMG_AIRBOAT) ? 384 : 172;
+			for (i = 0; i < cCount; i++)
+			{
+				vecTraceDir = dir * -1;// trace in the opposite direction the shot came from (the direction the shot is going)
+
+				vecTraceDir.x += random->RandomFloat(-flNoise, flNoise);
+				vecTraceDir.y += random->RandomFloat(-flNoise, flNoise);
+				vecTraceDir.z += random->RandomFloat(-flNoise, flNoise);
+
+				AI_TraceLine(ptr->endpos, ptr->endpos + vecTraceDir * -flTraceDist, MASK_ALL, this, COLLISION_GROUP_INTERACTIVE, &Bloodtr);
+				if (Bloodtr.fraction != 1.0)
+				{
+					UTIL_BloodDecalTrace(&Bloodtr, BLOOD_COLOR_YELLOW);
+				}
+			}
+
+			if (m_flGibHealth <= 0)
+			{
+				CEffectData	data;
+
+				data.m_vOrigin = WorldSpaceCenter();
+				data.m_vNormal = data.m_vOrigin - info.GetDamagePosition();
+				VectorNormalize(data.m_vNormal);
+
+				data.m_flScale = RemapVal(m_iHealth, 0, -500, 1, 3);
+				data.m_flScale = clamp(data.m_flScale, 1, 3);
+				data.m_nMaterial = ALIEN_GIBS;
+				data.m_nColor = BLOOD_COLOR_YELLOW;
+
+				DispatchEffect("HL1Gib", data);
+
+				UTIL_BloodSpray(WorldSpaceCenter(), info.GetDamageForce(), BLOOD_COLOR_YELLOW, 30, FX_BLOODSPRAY_ALL);
+				UTIL_BloodImpact(WorldSpaceCenter(), info.GetDamageForce(), BLOOD_COLOR_YELLOW, 100);
+
+				EmitSound("Player.Splat");
+
+				RemoveDeferred();
+			}
+		}
+
+		if (info.GetDamageType() & DMG_BLAST)
+		{
+			if (m_bloodColor == BLOOD_COLOR_RED)
+			{
+				CEffectData	data;
+
+				data.m_vOrigin = WorldSpaceCenter();
+				data.m_vNormal = data.m_vOrigin - info.GetDamagePosition();
+				VectorNormalize(data.m_vNormal);
+
+				data.m_flScale = RemapVal(m_iHealth, 0, -500, 1, 3);
+				data.m_flScale = clamp(data.m_flScale, 1, 3);
+				data.m_nMaterial = HUMAN_GIBS;
+				data.m_nColor = BLOOD_COLOR_RED;
+
+				DispatchEffect("HL1Gib", data);
+
+				UTIL_BloodSpray(WorldSpaceCenter(), info.GetDamageForce(), BLOOD_COLOR_RED, 30, FX_BLOODSPRAY_ALL);
+				UTIL_BloodImpact(WorldSpaceCenter(), info.GetDamageForce(), BLOOD_COLOR_RED, 100);
+
+				EmitSound("Player.Splat");
+
+				RemoveDeferred();
+			}
+		}
+
+		if (info.GetDamageType() & DMG_BLAST)
+		{
+			if (m_bloodColor == BLOOD_COLOR_GREEN)
+			{
+				CEffectData	data;
+
+				data.m_vOrigin = WorldSpaceCenter();
+				data.m_vNormal = data.m_vOrigin - info.GetDamagePosition();
+				VectorNormalize(data.m_vNormal);
+
+				data.m_flScale = RemapVal(m_iHealth, 0, -500, 1, 3);
+				data.m_flScale = clamp(data.m_flScale, 1, 3);
+				data.m_nMaterial = ALIEN_GIBS;
+				data.m_nColor = BLOOD_COLOR_GREEN;
+
+				DispatchEffect("HL1Gib", data);
+
+				UTIL_BloodSpray(WorldSpaceCenter(), info.GetDamageForce(), BLOOD_COLOR_GREEN, 30, FX_BLOODSPRAY_ALL);
+				UTIL_BloodImpact(WorldSpaceCenter(), info.GetDamageForce(), BLOOD_COLOR_GREEN, 100);
+
+				EmitSound("Player.Splat");
+
+				RemoveDeferred();
+			}
+		}
+
+		if (info.GetDamageType() & DMG_BLAST)
+		{
+			if (m_bloodColor == BLOOD_COLOR_YELLOW)
+			{
+				CEffectData	data;
+
+				data.m_vOrigin = WorldSpaceCenter();
+				data.m_vNormal = data.m_vOrigin - info.GetDamagePosition();
+				VectorNormalize(data.m_vNormal);
+
+				data.m_flScale = RemapVal(m_iHealth, 0, -500, 1, 3);
+				data.m_flScale = clamp(data.m_flScale, 1, 3);
+				data.m_nMaterial = ALIEN_GIBS;
+				data.m_nColor = BLOOD_COLOR_YELLOW;
+
+				DispatchEffect("HL1Gib", data);
+
+				UTIL_BloodSpray(WorldSpaceCenter(), info.GetDamageForce(), BLOOD_COLOR_YELLOW, 30, FX_BLOODSPRAY_ALL);
+				UTIL_BloodImpact(WorldSpaceCenter(), info.GetDamageForce(), BLOOD_COLOR_YELLOW, 100);
+
+				EmitSound("Player.Splat");
+
+				RemoveDeferred();
+			}
+		}
 	}
-	BaseClass::TraceAttack( info, dir, ptr, pAccumulator );
+
+	if (ragdoll_twitch.GetBool())
+	{
+		for (int i = 0; i < m_ragdoll.listCount; i++)
+		{
+			m_ragdoll.list[i].pObject->ApplyTorqueCenter(RandomVector(-200, 200));
+		}
+	}
+
+	BaseClass::TraceAttack(info, dir, ptr, pAccumulator);
 }
 
 void CRagdollProp::SetupBones( matrix3x4_t *pBoneToWorld, int boneMask )
